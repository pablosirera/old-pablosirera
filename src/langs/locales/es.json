{
  "about": {
    "description1": "Soy Pablo Sirera, desarrollador web viviendo en Valencia. Me interesa todo aquello relacionado con el desarrollo web y móvil. Me gusta estar siempre en constante aprendizaje y poner en práctica los conocimientos adquiridos.",
    "description2_1": "En mi cuenta personal de ",
    "description2_2": " he creado un repositorio con un ",
    "description2_3": " con información acerca de mi experiencia y mis conocimientos tecnológicos.",
    "description3_1": "También puedes seguirme en mi cuenta de ",
    "description3_2": " y en mi cuenta de ",
    "timeline": {
      "currently": "Actualmente",
      "descBonProfit": "<b>Gestor e-commerce</b> en una empresa de la industria cárnica.",
      "descSopra": "<b>Desarrollador frontend</b> tanto de aplicaciones para web como para móvil con VueJS, Angular, HTML, CSS, SASS, Ionic.",
      "emptyData": "No hay datos.",
      "juny": "Junio",
      "march": "Marzo"
    }
  },
  "home": {
    "principalImage": "Imagen principal"
  },
  "introduction": {
    "line1": "Hola, mi nombre es Pablo, soy Front-End en Valencia",
    "line2": "y soy un apasionado del ecosistema de JavaScript."
  },
  "months": {
    "april": "Abril",
    "august": "Agosto",
    "december": "Diciembre",
    "february": "Febrero",
    "january": "Enero",
    "july": "Julio",
    "june": "Junio",
    "march": "Marzo",
    "may": "Mayo",
    "november": "Noviembre",
    "october": "Octubre",
    "september": "Septiembre"
  },
  "notFound": {
    "button": "Ir a la página principal",
    "errorText": "No encontramos esta página."
  },
  "posts": {
    "addI18nVue": {
      "p1": "¿Hoy en día quién no necesita acceder a una web y poder visitarla en su propio idioma? La respuesta es obvia y con el plugin <a target='_blank' href='https://kazupon.github.io/vue-i18n/'>vue-i18n</a> podemos configurar nuestra aplicación para que sea multilenguaje.",
      "p10": "En este caso, estamos transmitiendo a la librería de <span class='code'>vue-i18n</span> que nos cree una instancia con el lenguaje que nosotros queremos, en este caso Español y en el caso de que falle sería el Inglés gracias a la propiedad <span class='code'>fallbackLocale</span>.",
      "p11": "Si quisieramos que VueI18n se instanciase con el idioma por defecto del navegador, sería suficiente modificando la propiedad <span class='code'>locale</span> por lo siguiente:",
      "p12": "Ahora necesitamos comunicar a <span class='vue'>Vue</span> que use la instancia de <span class='code'>VueI18n</span>. Para ello, iremos a main.js e importaremos nuestro objeto i18n:",
      "p13": "Una vez importado, lo añadiremos al objeto de <span class='vue'>Vue</span>:",
      "p14": "Vamos a añadir contenido a nuestro objeto <span class='code'>messages</span>, concretamente aquellos textos que queramos usar posteriormente traducidos en la aplicación. Lo que deberá ir dentro del objeto del idioma será otro objeto clave-valor, donde la clave será el nombre por el cual accederemos a ese texto. Para ello, abrimos el fichero <span class='code'>i18n.js</span> y modificamos el objeto <span class='code'>messages</span>:",
      "p15": "* Es importante que tanto la clave del idioma como la del texto se llamen igual y que si se añade un texto se haga en ambos idiomas, para evitar que posteriormente nos de errores. *",
      "p16": "Ahora vamos a usar esas traducciones, para eso, nos vamos a cualquier componente ya creado (por ejemplo <span class='code'>App.vue</span>) y añadimos el siguiente código HTML:",
      "p17": "Para usar el plugin de internalización simplemente usaremos <span class='code'>$t</span> y entre paréntesis añadiremos como un string la key deseada.",
      "p18": "En el caso de tener más elementos dentro del objeto anterior, podremos modificarlo así:",
      "p19": "y en nuestro código HTML sería:",
      "p2": "Para poder seguir estas instrucciones es necesario tener ya generado un proyecto con Vue.",
      "p20": "* Cabe destacar que la siguiente solución es una posibilidad que se propone pero existen muchas más que quizás se acoplen mejor a tu proyecto. *",
      "p21": "Para configurar el cambio de un idioma a otro debemos de tener implementada una lógica que cambie la propiedad <span class='code'>locale</span> de nuestra instancia de <span class='code'>i18n</span>, ya que es la propiedad que indica a la librería que idioma usar. Para esto, crearemos un componente de ejemplo que nos servirá para cambiar de un idioma a otro:",
      "p22": "Para mostrarlo es suficiente con añadirlo al componente <span class='code'>App.vue</span> en el sitio que queramos.",
      "p23": "Ahora, si lanzamos el server (<span class='code'>npm run serve</span>) veremos en el navegador dos botones, si pulsamos cada uno de ellos puede verse como nuestro texto anterior cambia de idioma dinámicamente.",
      "p24": "Para afinar un poco más, podemos añadir los dos <span class='code'>titles</span> de los idiomas para que se puedan traducir también. Primero, añadiremos en el fichero <span class='code'>i18n.js</span> los textos que queremos traducir:",
      "p25": "Además en nuestro componente tendremos que cambiar el <span class='code'>data languages</span> y convertirlo en una <span class='code'>computed</span>.",
      "p26": "Este cambio se debe a que en el data no tienes acceso a la propiedad <span class='code'>this</span>, en cambio en una computed si.",
      "p27": "Finalmente, si volvemos a lanzar el comando <span class='code'>npm run serve</span> podremos comprobar los cambios que hemos realizado anteriormente.",
      "p28": "He creado un repositorio con todos estos cambios realizados <a target='_blank' href='https://github.com/pablosirera/seed-vue-i18n'>Seed Vue i18n</a>",
      "p29": "<b>P.D.:</b> Quizás has pensado...¿y si tengo muchos textos para traducir? El archivo <span class='code'>i18n.js</span> se puede hacer muy complicado de leer...esto es cierto y para evitarlo se pueden añadir todos los textos en ficheros específicos para cada idioma. De todo esto hablaré con más detenimiento en el próximo post.",
      "p3": "En primer lugar, hay que instalar el plugin vue-i18n para la internalización.",
      "p4": "Una vez instalado, procedemos a configurar el plugin. En la carpeta <span class='code'>src</span>, hay que crear un directorio llamado <span class='code'>plugins</span> y dentro de él crear un fichero <span class='code'>i18n.js</span>.",
      "p5": "Dentro de este archivo, añadiremos la configuración del plugin para los idiomas que nosotros queramos. Pueden añadirse todos los idiomas que se desee, pero para este ejemplo solamente haremos Español e Inglés.",
      "p6": "Para poder iniciar la configuración de los idiomas, primero hay que crear la estructura de mensajes. Inicializaremos un objeto de JavaScript, las <span class='code'>keys</span> del objeto deben ser el idioma que queramos añadir.",
      "p7": "Para crearlo, añade el siguiente código al archivo <span class='code'>i18n.js</span>:",
      "p8": "Con el código <span class='code'>Vue.use(VueI18n)</span>, le estamos comunicando a <span class='vue'>Vue</span> que use el plugin que hemos instalado.",
      "p9": "A continuación, vamos a crear una instancia de <span class='code'>VueI18n</span> para poder usarlo. Después del código anterior añadimos lo siguiente:",
      "title": "Añadir i18n en una aplicación Vue",
      "title2": "Configurar vue-i18n",
      "title3": "Añadir texto para traducir",
      "title4": "Cambiar de idioma"
    },
    "deployAppsVue": {
      "p1": "¿Quieres desplegar tu aplicación con Vue en internet y no sabes cómo? Sigue entonces los siguientes pasos para desplegar tu app en GitHub Pages:",
      "p2": "• Primero de todo, cámbiate a otra rama diferente de master, esta la usaremos para trabajar sobre ella en vez de sobre la rama principal.",
      "p3": "El motivo de esto, es que al hacer a continuación el deploy de la aplicación, la carpeta <span class='code'>/dist</span> se subirá a master y no estará el contenido de la aplicación, sino el de la carpeta <span class='code'>/dist</span>.",
      "p4-1": "• En el siguiente paso, habrá que crear el archivo ",
      "p4-2": " en la raíz del proyecto con el siguiente contenido:",
      "p5": "La tarea de build es la establecida por defecto:",
      "p6": "El script creará el build de la aplicación y lo subirá a master.",
      "p7-1": "• Para finalizar, en la consola hay que lanzar el comando ",
      "p7-2": " para ejecutar el script que se ha creado anteriormente. Una vez que termine, ya estará disponible en la url de GitHub Pages la aplicación desplegada.",
      "title": "Como desplegar una aplicación hecha con Vue en GithubPages"
    },
    "eventBus": {
      "p1": "Alguna vez me ha hecho falta crear un poco de <b>magia oscura</b> en alguna aplicación. Algunos le llaman también <b>extraña comunicación entre componentes</b>, aunque puede usarse sin necesidad de estar en un componente. Para realizar esto, existe un patrón llamado <span class='code'><b>event bus pattern === publish-subscribe pattern</b></span> que se integra genial con <span class='vue'>Vue</span>. Cabe mencionar que este patrón no está considerado una buena práctica, pero no obstante creo que es recomendable conocerlo por si en algún momento nos hiciese falta.",
      "p10": "Si quisiéramos eliminar todos los eventos, simplemente habría que usar <span class='code'>EventBus.$off()</span>.",
      "p11": "Ejemplos para eliminar registros de eventos:",
      "p2": "Lo primero que hay que hacer es crear un nuevo event bus y exportarlo.",
      "p3": "Lo único que hemos hecho ha sido crear una nueva instancia de <span class='vue'>Vue</span> que podremos usar en cualquier parte de nuestra aplicación.",
      "p4": "Ahora vamos a usar la instancia de event bus. Para esto, lo que hay que hacer es importarlo en el componente que queramos usarlo.",
      "p5": "En el ejemplo, podemos observar que tenemos un componente con un botón. Al hacer click sobre él ejecuta un método y ese método emite un evento a través de nuestro <span class='code'>EventBus</span>. Lo que recibe como parámetro es un string que hace referencia al nombre del evento.",
      "p6": "A continuación realizaremos el código en el componente que queremos que reciba este evento que terminamos de emitir.",
      "p7": "En el componente donde recibimos el evento cargamos, en el lifecycle <span class='code'>mounted</span>, los eventos que queremos escuchar, para que así, cuando lancemos el <span class='code'>$emit</span> se llame a nuestro callback que pasamos por parámetro.",
      "p8": "Si solo quisieramos escuchar el evento una sola vez, usaríamos <span class='code'>EventBus.$once(nameEvent, callback)</span>",
      "p9": "Por último, cabe decir que una vez que queramos terminar de escuchar el evento deberíamos eliminar dicho registro. Para ello usáremos el método <span class='code'>EventBus.$off</span>, al cual podemos pasarle el nombre del evento que queremos eliminar y un callback o simplemente pasándole el nombre del evento.",
      "title": "Bus de Eventos global con Vue.js",
      "title2": "Configurar Event Bus",
      "title3": "Emitir un evento",
      "title4": "Recibir un evento",
      "title5": "Eliminar el evento"
    }
  },
  "projects": {
    "learningTracker": "Learning tracker sobre mis conocimientos.",
    "timeline": "Timeline minimalista con VueJS."
  }
}
