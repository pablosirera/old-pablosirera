{
  "about": {
    "description1": "Soy Pablo Sirera, desarrollador web viviendo en Valencia. Me interesa todo aquello relacionado con el desarrollo web y m√≥vil. Me gusta estar siempre en constante aprendizaje y poner en pr√°ctica los conocimientos adquiridos.",
    "description2_1": "En mi cuenta personal de ",
    "description2_2": " he creado un repositorio con un ",
    "description2_3": " con informaci√≥n acerca de mi experiencia y mis conocimientos tecnol√≥gicos.",
    "description3_1": "Tambi√©n puedes seguirme en mi cuenta de ",
    "description3_2": " y en mi cuenta de ",
    "timeline": {
      "currently": "Actualmente",
      "descBonProfit": "<b>Gestor e-commerce</b> en una empresa de la industria c√°rnica.",
      "descDekalabs": "<b>Senior frontend</b> desarrollando aplicaciones RWD (Responsive Web Design) con VueJS, Nuxt, HTML, SASS.",
      "descSopra": "<b>Desarrollador frontend</b> tanto de aplicaciones para web como para m√≥vil con VueJS, Angular, HTML, CSS, SASS, Ionic.",
      "emptyData": "No hay datos.",
      "juny": "Junio",
      "march": "Marzo"
    },
    "title": "Info sobre Pablo Sirera"
  },
  "blog": {
    "title": "Art√≠culos sobre desarrollo web üë®üèº‚Äçüíª | Pablo Sirera"
  },
  "home": {
    "principalImage": "Imagen principal"
  },
  "introduction": {
    "line1": "Hola, mi nombre es Pablo, soy Front-End en Valencia",
    "line2": "y soy un apasionado del ecosistema de JavaScript."
  },
  "months": {
    "april": "Abril",
    "august": "Agosto",
    "december": "Diciembre",
    "february": "Febrero",
    "january": "Enero",
    "july": "Julio",
    "june": "Junio",
    "march": "Marzo",
    "may": "Mayo",
    "november": "Noviembre",
    "october": "Octubre",
    "september": "Septiembre"
  },
  "notFound": {
    "button": "Ir a la p√°gina principal",
    "errorText": "No encontramos esta p√°gina."
  },
  "posts": {
    "addI18nVue": {
      "p1": "¬øHoy en d√≠a qui√©n no necesita acceder a una web y poder visitarla en su propio idioma? La respuesta es obvia y con el plugin <a target='_blank' href='https://kazupon.github.io/vue-i18n/'>vue-i18n</a> podemos configurar nuestra aplicaci√≥n para que sea multilenguaje.",
      "p10": "En este caso, estamos transmitiendo a la librer√≠a de <span class='code'>vue-i18n</span> que nos cree una instancia con el lenguaje que nosotros queremos, en este caso Espa√±ol y en el caso de que falle ser√≠a el Ingl√©s gracias a la propiedad <span class='code'>fallbackLocale</span>.",
      "p11": "Si quisieramos que VueI18n se instanciase con el idioma por defecto del navegador, ser√≠a suficiente modificando la propiedad <span class='code'>locale</span> por lo siguiente:",
      "p12": "Ahora necesitamos comunicar a <span class='vue'>Vue</span> que use la instancia de <span class='code'>VueI18n</span>. Para ello, iremos a main.js e importaremos nuestro objeto i18n:",
      "p13": "Una vez importado, lo a√±adiremos al objeto de <span class='vue'>Vue</span>:",
      "p14": "Vamos a a√±adir contenido a nuestro objeto <span class='code'>messages</span>, concretamente aquellos textos que queramos usar posteriormente traducidos en la aplicaci√≥n. Lo que deber√° ir dentro del objeto del idioma ser√° otro objeto clave-valor, donde la clave ser√° el nombre por el cual accederemos a ese texto. Para ello, abrimos el fichero <span class='code'>i18n.js</span> y modificamos el objeto <span class='code'>messages</span>:",
      "p15": "* Es importante que tanto la clave del idioma como la del texto se llamen igual y que si se a√±ade un texto se haga en ambos idiomas, para evitar que posteriormente nos de errores. *",
      "p16": "Ahora vamos a usar esas traducciones, para eso, nos vamos a cualquier componente ya creado (por ejemplo <span class='code'>App.vue</span>) y a√±adimos el siguiente c√≥digo HTML:",
      "p17": "Para usar el plugin de internalizaci√≥n simplemente usaremos <span class='code'>$t</span> y entre par√©ntesis a√±adiremos como un string la key deseada.",
      "p18": "En el caso de tener m√°s elementos dentro del objeto anterior, podremos modificarlo as√≠:",
      "p19": "y en nuestro c√≥digo HTML ser√≠a:",
      "p2": "Para poder seguir estas instrucciones es necesario tener ya generado un proyecto con Vue.",
      "p20": "* Cabe destacar que la siguiente soluci√≥n es una posibilidad que se propone pero existen muchas m√°s que quiz√°s se acoplen mejor a tu proyecto. *",
      "p21": "Para configurar el cambio de un idioma a otro debemos de tener implementada una l√≥gica que cambie la propiedad <span class='code'>locale</span> de nuestra instancia de <span class='code'>i18n</span>, ya que es la propiedad que indica a la librer√≠a que idioma usar. Para esto, crearemos un componente de ejemplo que nos servir√° para cambiar de un idioma a otro:",
      "p22": "Para mostrarlo es suficiente con a√±adirlo al componente <span class='code'>App.vue</span> en el sitio que queramos.",
      "p23": "Ahora, si lanzamos el server (<span class='code'>npm run serve</span>) veremos en el navegador dos botones, si pulsamos cada uno de ellos puede verse como nuestro texto anterior cambia de idioma din√°micamente.",
      "p24": "Para afinar un poco m√°s, podemos a√±adir los dos <span class='code'>titles</span> de los idiomas para que se puedan traducir tambi√©n. Primero, a√±adiremos en el fichero <span class='code'>i18n.js</span> los textos que queremos traducir:",
      "p25": "Adem√°s en nuestro componente tendremos que cambiar el <span class='code'>data languages</span> y convertirlo en una <span class='code'>computed</span>.",
      "p26": "Este cambio se debe a que en el data no tienes acceso a la propiedad <span class='code'>this</span>, en cambio en una computed si.",
      "p27": "Finalmente, si volvemos a lanzar el comando <span class='code'>npm run serve</span> podremos comprobar los cambios que hemos realizado anteriormente.",
      "p28": "He creado un repositorio con todos estos cambios realizados <a target='_blank' href='https://github.com/pablosirera/seed-vue-i18n'>Seed Vue i18n</a>",
      "p29": "<b>P.D.:</b> Quiz√°s has pensado...¬øy si tengo muchos textos para traducir? El archivo <span class='code'>i18n.js</span> se puede hacer muy complicado de leer...esto es cierto y para evitarlo se pueden a√±adir todos los textos en ficheros espec√≠ficos para cada idioma. De todo esto hablar√© con m√°s detenimiento en el pr√≥ximo post.",
      "p3": "En primer lugar, hay que instalar el plugin vue-i18n para la internalizaci√≥n.",
      "p4": "Una vez instalado, procedemos a configurar el plugin. En la carpeta <span class='code'>src</span>, hay que crear un directorio llamado <span class='code'>plugins</span> y dentro de √©l crear un fichero <span class='code'>i18n.js</span>.",
      "p5": "Dentro de este archivo, a√±adiremos la configuraci√≥n del plugin para los idiomas que nosotros queramos. Pueden a√±adirse todos los idiomas que se desee, pero para este ejemplo solamente haremos Espa√±ol e Ingl√©s.",
      "p6": "Para poder iniciar la configuraci√≥n de los idiomas, primero hay que crear la estructura de mensajes. Inicializaremos un objeto de JavaScript, las <span class='code'>keys</span> del objeto deben ser el idioma que queramos a√±adir.",
      "p7": "Para crearlo, a√±ade el siguiente c√≥digo al archivo <span class='code'>i18n.js</span>:",
      "p8": "Con el c√≥digo <span class='code'>Vue.use(VueI18n)</span>, le estamos comunicando a <span class='vue'>Vue</span> que use el plugin que hemos instalado.",
      "p9": "A continuaci√≥n, vamos a crear una instancia de <span class='code'>VueI18n</span> para poder usarlo. Despu√©s del c√≥digo anterior a√±adimos lo siguiente:",
      "title": "A√±adir i18n en una aplicaci√≥n Vue",
      "title2": "Configurar vue-i18n",
      "title3": "A√±adir texto para traducir",
      "title4": "Cambiar de idioma"
    },
    "deployAppsVue": {
      "p1": "¬øQuieres desplegar tu aplicaci√≥n con Vue en internet y no sabes c√≥mo? Sigue entonces los siguientes pasos para desplegar tu app en GitHub Pages:",
      "p2": "‚Ä¢ Primero de todo, c√°mbiate a otra rama diferente de master, esta la usaremos para trabajar sobre ella en vez de sobre la rama principal.",
      "p3": "El motivo de esto, es que al hacer a continuaci√≥n el deploy de la aplicaci√≥n, la carpeta <span class='code'>/dist</span> se subir√° a master y no estar√° el contenido de la aplicaci√≥n, sino el de la carpeta <span class='code'>/dist</span>.",
      "p4-1": "‚Ä¢ En el siguiente paso, habr√° que crear el archivo ",
      "p4-2": " en la ra√≠z del proyecto con el siguiente contenido:",
      "p5": "La tarea de build es la establecida por defecto:",
      "p6": "El script crear√° el build de la aplicaci√≥n y lo subir√° a master.",
      "p7-1": "‚Ä¢ Para finalizar, en la consola hay que lanzar el comando¬†",
      "p7-2": "¬†para ejecutar el script que se ha creado anteriormente. Una vez que termine, ya estar√° disponible en la url de GitHub Pages la aplicaci√≥n desplegada.",
      "title": "Como desplegar una aplicaci√≥n hecha con Vue en GithubPages"
    },
    "eventBus": {
      "p1": "Alguna vez me ha hecho falta crear un poco de <b>magia oscura</b> en alguna aplicaci√≥n. Algunos le llaman tambi√©n <b>extra√±a comunicaci√≥n entre componentes</b>, aunque puede usarse sin necesidad de estar en un componente. Para realizar esto, existe un patr√≥n llamado <span class='code'><b>event bus pattern === publish-subscribe pattern</b></span> que se integra genial con <span class='vue'>Vue</span>. Cabe mencionar que este patr√≥n no est√° considerado una buena pr√°ctica, pero no obstante creo que es recomendable conocerlo por si en alg√∫n momento nos hiciese falta.",
      "p10": "Si quisi√©ramos eliminar todos los eventos, simplemente habr√≠a que usar <span class='code'>EventBus.$off()</span>.",
      "p11": "Ejemplos para eliminar registros de eventos:",
      "p2": "Lo primero que hay que hacer es crear un nuevo event bus y exportarlo.",
      "p3": "Lo √∫nico que hemos hecho ha sido crear una nueva instancia de <span class='vue'>Vue</span> que podremos usar en cualquier parte de nuestra aplicaci√≥n.",
      "p4": "Ahora vamos a usar la instancia de event bus. Para esto, lo que hay que hacer es importarlo en el componente que queramos usarlo.",
      "p5": "En el ejemplo, podemos observar que tenemos un componente con un bot√≥n. Al hacer click sobre √©l ejecuta un m√©todo y ese m√©todo emite un evento a trav√©s de nuestro <span class='code'>EventBus</span>. Lo que recibe como par√°metro es un string que hace referencia al nombre del evento.",
      "p6": "A continuaci√≥n realizaremos el c√≥digo en el componente que queremos que reciba este evento que terminamos de emitir.",
      "p7": "En el componente donde recibimos el evento cargamos, en el lifecycle <span class='code'>mounted</span>, los eventos que queremos escuchar, para que as√≠, cuando lancemos el <span class='code'>$emit</span> se llame a nuestro callback que pasamos por par√°metro.",
      "p8": "Si solo quisieramos escuchar el evento una sola vez, usar√≠amos <span class='code'>EventBus.$once(nameEvent, callback)</span>",
      "p9": "Por √∫ltimo, cabe decir que una vez que queramos terminar de escuchar el evento deber√≠amos eliminar dicho registro. Para ello us√°remos el m√©todo <span class='code'>EventBus.$off</span>, al cual podemos pasarle el nombre del evento que queremos eliminar y un callback o simplemente pas√°ndole el nombre del evento.",
      "title": "Bus de Eventos global con Vue.js",
      "title2": "Configurar Event Bus",
      "title3": "Emitir un evento",
      "title4": "Recibir un evento",
      "title5": "Eliminar el evento"
    },
    "minute": "minuto",
    "minutes": "minutos",
    "scaffoldingVue": {
      "alt1": "Desglose opciones vue-cli",
      "alt2": "Estructura b√°sica",
      "alt3": "Estructura componentes globales",
      "alt4": "Estructura componentes de vista",
      "alt5": "Estructura resto de ficheros",
      "p1": "Hace ya un tiempo que empec√© a trabajar con <span class='vue'>Vue</span> y, sinceramente, es uno de los frameworks que m√°s me apasiona. Entre muchas razones, me gusta por su sencillez, por su flexibilidad y por su comunidad.",
      "p10": "En este ejemplo vemos como he creado una carpeta por vista y dentro de ella el componente de la vista lo he llamado <span class='code'>index.vue</span>. Dentro de cada carpeta existe una carpeta <span class='code'>components</span> que en este caso pertenecen solamente a los componentes de la vista.",
      "p11": "Una vez tengamos los componentes organizados, vamos a organizar el resto de ficheros de la aplicaci√≥n. La idea ser√≠a crear una carpeta <span class='code'>shared</span> dentro de nuestro <strong>src</strong> y ah√≠ a√±adir por ejemplo nuestras constantes, los archivos de traducciones, directivas, mixins, constantes, modelos, etc.",
      "p12": "La idea de shared es mantener lo nativo de <span class='vue'>Vue</span> en la carpeta ra√≠z (components, store, etc.) y el contenido adicional almacenarlo dentro de este directorio.",
      "p13": "Por √∫ltimo, me gustar√≠a remarcar que aunque para mi este scaffolding es el m√°s √∫til para trabajar no tiene que ser as√≠ para todo el mundo. As√≠ que os animo a todos a probar d√≠a a d√≠a cual es el que m√°s se adapta a vuestra forma de trabajo.",
      "p14": "Espero que pueda serviros de ayuda y cualquier feedback por <a target='_blank' href='https://twitter.com/pablosirera'>twitter</a> ser√° bienvenido ‚úåÔ∏è.",
      "p15": "Os dejo tambi√©n el link al repo de <a target='_blank' href='https://github.com/pablosirera/scaffolding-vue'>github</a>, por si os quer√©is descargar este ejemplo.",
      "p2": "Una vez comienzas a usar <span class='vue'>Vue</span> con asiduidad y realizas varios proyectos, empiezas a darte cuenta de que su base se construye sobre componentes. Con el desarrollo de aplicaciones se hace notar su flexibilidad con respecto a la estructura de carpetas, el framework no te pone pr√°cticamente ning√∫n problema al respecto, pero una vez comienzas a generar vistas (que son componentes), componentes que pertenecen solo a una vista, componentes comunes, etc. ¬øqu√© pasa? ¬øc√≥mo organizamos todos esos componentes para verlos d√≠a a d√≠a y que sea lo menos doloroso posible?",
      "p3": "En el post de hoy os ense√±ar√© un ejemplo de scaffolding, el cual he ido adquiriendo con el paso del tiempo tras probar un ejemplo tras otro, finalmente este es, desde mi opini√≥n, el m√°s c√≥modo.",
      "p4": "Para empezar, tendremos que generar un proyecto de <span class='vue'>Vue</span> b√°sico con <span class='code'>vue-cli</span>, ya que la estructura que nos presenta desde un primer momento es la que intentaremos mantener siempre. Yo he generado un proyecto con la configuraci√≥n lo m√°s real posible a lo que se podr√≠a usar en un proyecto relativamente grande.",
      "p5": "Una vez termine de instalarse todo, esta ser√° la estructura que nos genera <span class='code'>vue-cli</span>.",
      "p6": "Cuando desarrollas una aplicaci√≥n SPA, por ejemplo, con diferentes rutas y diferentes vistas, al final terminas teniendo componentes que se usan solamente en ciertas vistas y otros que se usan por toda la aplicaci√≥n. En este apartado vamos a organizar los componentes comunes por tipos de componentes. Veamos un ejemplo visual:",
      "p7": "Como veis, dentro de la carpeta <span class='code'>Components</span> hemos generado dos carpetas, una <span class='code'>Layout</span> y otra <span class='code'>Ui</span>. Esto son dos de las diferenciaciones que yo suelo hacer en mis proyectos, pero depende del proyecto o del equipo de desarrollo los tipos de organizaci√≥n pueden variar.",
      "p8": "En el caso de tener componentes que no pertenecen a ning√∫n tipo espec√≠fico, la idea ser√≠a generar una carpeta llamada <span class='code'>Common</span> a la misma altura que layout y ui.",
      "p9": "Una vez que tengamos los componentes globales organizados, continuaremos con los componentes que solamente pertenecen a una vista en concreto. Veamos un ejemplo.",
      "title": "Estructura de carpetas en Vue",
      "title2": "Crear estructura base",
      "title3": "Crear componentes globales",
      "title4": "Crear componentes de vista",
      "title5": "Resto de ficheros",
      "title6": "Conclusi√≥n"
    }
  },
  "projects": {
    "learningTracker": "Learning tracker sobre mis conocimientos.",
    "timeline": "Timeline minimalista con VueJS.",
    "title": "Lista de proyectos personales | Pablo Sirera"
  }
}
